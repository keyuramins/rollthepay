### RollThePay Cursor Rules

These rules are authoritative for this repository. Follow them for all new code, edits, reviews, and refactors.

## Architecture & Rendering
- **Visualize first**: Before coding a new page or component, sketch the layout (wireframe) and data sections it will render from the CSV. Confirm sections and states (loading not applicable—static) before implementation.
- **Server Components by default**: Every `page.tsx` in `app/**` must be a Server Component. No client-side data fetching in pages.
- **ISR everywhere**: Use Incremental Static Regeneration with revalidation of 1 year.
  - Set `export const revalidate = 60 * 60 * 24 * 365` (31536000) in every `page.tsx` and in any route handlers if present.
  - Do not use `output: 'export'` (it disables ISR). Use standard Next build with file-system cache.
- **Client Components**: Only when necessary.
  - Place them under `@/components/**` (use kebab-case filenames) and export PascalCase components.
  - Never place client components directly under `app/**`.
  - Add `"use client"` at the top only where required.
- **Unique page component**: Each page renders a single unique top-level component (e.g., `OccupationPage`) that composes smaller presentational components. Avoid duplicating page-level layouts across routes—extract to shared components.
- **Static-first**: Prefer SSG over SSR. No runtime database/services. All content originates from `data/**` CSV files.

## Data Model & Access
- **Single source of truth**: Use the CSV files under `data/**`. No parallel JSON or duplicated state.
- **One-time data access**: Read and parse CSV once per build (or per ISR regeneration). Cache the parsed result in memory in module scope of server files to avoid repeated parsing.
- **No redundancy for titles**: Treat `title` as the source-of-truth for display and SEO. Ignore `h1Title` unless `title` is missing; do not show both.
- **Slug**: Use `slug_url` from CSV as-is for the route segment. It must be lowercase in source. Do not transform or re-slugify.
- **Invalid tokens**: Gracefully skip or sanitize cells containing `#REF!` or empty values. Never crash a build due to malformed CSV.
- **Numeric parsing**: Coerce numeric-like strings; default to `null` when not parseable. Never infer currency from numbers; always from country metadata.

## Routing & URL Conventions
- **Route pattern**: `/[country]/[state?]/[slug]` all lowercase.
  - Country is required. If a state exists in data, it occupies the second segment; otherwise use just `/[country]/[slug]`.
  - Values for `[country]`, `[state]`, `[slug]` must be lowercase and URL-safe.
- **App Router structure**:
  - `app/[country]/[slug]/page.tsx` for country-only records.
  - `app/[country]/[state]/[slug]/page.tsx` for country+state records.
- **Static params**: Implement `generateStaticParams` to enumerate all pages from CSV at build time. Set `export const dynamicParams = false` to guarantee static paths only.
- **Canonical**: Provide canonical URLs in metadata. No querystring variants.

## ISR, Caching & Build
- **Revalidation**: `revalidate = 31536000` (1 year) everywhere. Do not reduce without explicit product approval.
- **Next cache**: Use Next's file-system cache. Do not disable default caching. Avoid `force-dynamic`.
- **Fetch policy**: If any `fetch` is ever introduced (not expected), default to `cache: 'force-cache'` with `next: { revalidate: 31536000 }`.
- **No runtime rebuilds**: Do not trigger on-demand revalidation. The site must not be rebuilt for 1 year unless a critical fix is required.
- **Static assets**: Store derived JSON or images in `public/` if precomputed. Do not compute at request time.

## SEO & Metadata
- **Per-page metadata**: Use Next metadata API. Derive values once from CSV row:
  - `title`: from `title` (fallback `h1Title` only if `title` absent).
  - `description`: concise summary including occupation, country, and if present state; avoid keyword stuffing.
  - `alternates.canonical`: computed from the route.
  - OpenGraph/Twitter cards with consistent branding.
- **Headings**: Exactly one `<h1>` per page, matching the chosen display title. Do not repeat title text in multiple headings.
- **Sitemap & robots**: Provide a static sitemap that includes all generated routes. Allow indexing; no duplicated routes.

## Components & Styling
- **Naming**: Files in `components/**` use kebab-case filenames; exported React components are PascalCase. Example: `components/occupation/summary-card.tsx` exporting `SummaryCard`.
- **Reusability**: Factor shared UI into `components/ui/**`. Do not duplicate markup across pages.
- **No CSS-in-JS at runtime**: Prefer Tailwind (existing) or static CSS. Avoid runtime style computation that affects caching.
- **Use Shadcn**: Prefer Shadcn UI components for new UI elements and shared primitives. Use existing Shadcn components where possible for consistency, accessibility, and maintainability. Only extend or customize when necessary for RollThePay requirements.

## Localization & Currency
- **Localization**: Use locale-aware formatting via `Intl` only on the server.
  - Locale determination by country: AU → `en-AU`, IN → `en-IN`, etc.
- **Currency formatting**:
  - Australia: currency `AUD`, locale `en-AU`, thousands grouping (e.g., `123,456`, decimals as required).
  - India: currency `INR`, locale `en-IN`, lakh/crore grouping (e.g., `1,23,123`).
  - Never manually insert commas; always use `Intl.NumberFormat(locale, { style: 'currency', currency })` or a dedicated numeric formatter for non-currency amounts.
- **Units**: Show both annual and hourly values where available; annotate currency consistently. Do not mix symbols and codes within the same page—prefer code (`AUD`, `INR`) in tables and symbol in headings.

## Data-driven Page Contract
- From each CSV row, the page must render:
  - Primary title (from `title`)
  - Country and optional state
  - Occupation and slug (unchanged)
  - Salary ranges (low, high, average) with currency formatting per locale
  - Experience buckets if present
  - Related links only when valid (skip `#REF!`)
- Do not render empty sections. Omit blocks when data missing.

## Performance & Quality
- **No client data fetching**: Never fetch in Client Components.
- **Images**: Use static images under `public/`. Avoid remote patterns without caching.
- **Accessibility**: All interactive elements must be keyboard accessible; headings in order; images with alt text.
- **Type safety**: Strong types for parsed CSV rows. No `any` in public APIs.
 - **No tests**: Do not add unit/e2e tests or test tooling in this repository unless explicitly requested in writing. Remove any `tests/**`, test configs, and test scripts if introduced.

## File & Code Organization
- **Utilities**: Data parsing/formatting utilities live in `@/lib/**`. Currency and locale helpers in `@/lib/format/**`.
- **Do not modify data**: Never edit CSV inside code. If data is wrong, fix the CSV file.
- **Testing**: Add basic unit tests for parsing and formatting functions when introduced.

## Implementation Checklist (per new route/page)
1. Define route in `app/[country]/[state?]/[slug]/page.tsx` as a Server Component.
2. `export const revalidate = 31536000` and `export const dynamicParams = false`.
3. Implement `generateStaticParams` to enumerate rows from relevant CSV.
4. Parse CSV once in a server utility and reuse.
5. Build metadata via `generateMetadata` from the chosen row.
6. Render one unique page component that composes shared UI.
7. Format numbers/currency with `Intl` per locale.
8. Skip invalid or `#REF!` cells; do not render empty content.
9. Ensure URLs are `/country[/state]/slug` all lowercase with slug from CSV unchanged.
10. Add route to sitemap. Verify no duplicate `title`/`h1`.

## Prohibited
- No SSR-only features that disable ISR (e.g., `export const dynamic = 'force-dynamic'`).
- No client-side routing hacks for data display.
- No duplicate titles or headings (avoid `title` and `h1Title` redundancy).
- No transforming or re-slugifying `slug_url`.

## Notes from README
- Mission: provide accurate salary data by country/state; simple UX; transparent labor market info.
- Keep content concise and relevant to the occupation and location. Avoid marketing fluff on data pages.


